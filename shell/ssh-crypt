#!/bin/bash
# ssh-crypt: a wrapper for ssh and ssl to encrypt and decrypt files
# SPDX-License-Identifier: LGPL-2.1-or-later
# Copyright (C) 2024 Eric Herman <eric@freesa.org>
# inspired by https://www.bjornjohansen.com/encrypt-file-using-ssh-key

set -e
set -o pipefail

SC_SCRIPT_VERSION=0.0.0
function sc-usage() {
	cat <<END_OF_SC_HELP
Usage:
 $(basename $0) [options] path/to/input/file

Options:
 -e, --encrypt=/path/to/recipient/ssh-key.pub
 -d, --decrypt=/path/to/private/ssh-key
 -v, --verbose		run in verbose mode
 -h, --help		display this help
 -V, --version		display version ($SC_SCRIPT_VERSION)

NOTE: In most cases, it is far easier (and likely makes more
sense) to use GPG.  That said, GPG is not as widely used as
as SSH, even with the rise of GPG-signing git commits.  If GPG is
not a viable option, openssl can be used to encrypt a file using
the recipient's OpenSSH public key, the results of which can be
safely sent over an insecure channel.  However, the process is
tedious for both the sender and receiver.

There is nothing magic in this script, one can do all of the
steps by hand.  This script only reduces the tedium _slightly_,
and serves as an executable illustration of the processes.

Usage Example:
 echo "hello world" > /tmp/test-file &&
 $0 --verbose --encrypt=~/.ssh/id_rsa.pub /tmp/test-file &&
 $0 --verbose --decrypt=~/.ssh/id_rsa ./test-file.enc &&
 diff -u /tmp/test-file ./test-file &&
 echo "SUCCESSS. (/tmp/test-file matches ./test-file)" || echo "FAIL \$?"
END_OF_SC_HELP
}

SC_VERBOSE=false
SC_ENCRYPT=false
SC_DECRYPT=false
SC_KEY=""

function ensure-arg() {
	if [ -z "$OPTARG" ]; then
		echo "No argument provided for --$OPT option" >&2
		exit 1
	fi
}
while getopts "e:d:vVh-:" OPT; do
	if [ "$OPT" = "-" ]; then
		OPT="${OPTARG%%=*}"
		OPTARG="${OPTARG#$OPT}"
		OPTARG="${OPTARG#=}"
	fi
	case "$OPT" in
		e | encrypt )	ensure-arg; SC_ENCRYPT=true; SC_KEY="$OPTARG" ;;
		d | decrypt )	ensure-arg; SC_DECRYPT=true; SC_KEY="$OPTARG" ;;
		v | verbose )	SC_VERBOSE=true ;;
		V | version )	echo "ssh-crypt $SC_SCRIPT_VERSION"; exit 0;;
		h | help )	sc-usage; exit 0 ;;
		\? )		sc-usage; exit 1 ;;
		* )		echo "Invalid --$OPT" >&2; sc-usage; exit 1;;
	esac
done
shift $((OPTIND-1))

if $SC_VERBOSE; then
	set -x
	SC_DASH_V=-v
else
	SC_DASH_V=
fi

# replace '~' with $HOME
SC_KEY="${SC_KEY/#\~/$HOME}"

SC_FILE="$1"
if [ "_$SC_FILE" == "_" ] || [ ! -e "$SC_FILE" ]; then
	echo "must specify a file" >&2
	sc-usage
	exit 1
fi

if $SC_ENCRYPT && $SC_DECRYPT; then
	echo "encrypt or decrypt, not both" >&2
	exit 1
fi

if $SC_ENCRYPT; then
	SC_FILE_BASE=$(basename "$SC_FILE")
	SC_SYMMETRIC_KEY="$SC_FILE_BASE.symmetric-key"
	if $SC_VERBOSE; then cat <<-EOF

		RSA cannot directly encrypt a piece of data which is larger
		than the key size (elliptic curve and other asymmetric
		encryption methods have similar size constraints),
		thus we create a small one-time use symmetric key:

			$SC_SYMMETRIC_KEY

		This key will be used to encrypt the clear-text file.
		This key will then be encrypted using the recipient's public
		key.
			$SC_SYMMETRIC_KEY.enc

		The recipient can decrypt the symmetric key using their
		private key, and then decrypt the encrypted file using the
		decrypted symmetric key.

		EOF
	fi

	if $SC_VERBOSE; then cat <<-EOF

		First, we get 256 random bits to use for our symmetric key

		EOF
	fi
	SC_RAND_256_BITS=$(( 256 / 8 ))
	openssl rand -out "$SC_SYMMETRIC_KEY" $SC_RAND_256_BITS
	if $SC_VERBOSE; then
		ls -l "$SC_SYMMETRIC_KEY"
		file  "$SC_SYMMETRIC_KEY"
	fi

	if $SC_VERBOSE; then cat <<-EOF

		Next, we encrypt the file using the symmetric key

		EOF
	fi
	openssl aes-256-cbc \
		-a \
		-md sha512 \
		-pbkdf2 \
		-iter 1000000 \
		-in   "$SC_FILE" \
		-out  "$SC_FILE_BASE.enc" \
		-pass "file:$SC_SYMMETRIC_KEY"
	if $SC_VERBOSE; then
		ls -l "$SC_FILE_BASE.enc"
		file  "$SC_FILE_BASE.enc"
	fi

	if $SC_VERBOSE; then cat <<-EOF

		To encrypt the symmetric key using the recipient's SSH public
		key, it must be in PEM format,
		( https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail )
		OpenSSH supports PEM format, but not what is typically found,
		however we can convert the public key to PEM if needed

		EOF
	fi

	if grep 'PUBLIC KEY-----' <( cat "$SC_KEY" ); then
		SC_PUB_KEY_PEM="$SC_KEY"
	else
		SC_KEY_BASE=$(basename "$SC_KEY")
		SC_PUB_KEY_PEM="$SC_KEY_BASE.pem"
		cat <<-EOF

			Exporting a PEM version of public key:
				$SC_PUB_KEY_PEM

		EOF
		ssh-keygen -f "$SC_KEY" -e -m pem \
			> "$SC_PUB_KEY_PEM"
	fi
	if $SC_VERBOSE; then
		ls -l "$SC_PUB_KEY_PEM"
		file  "$SC_PUB_KEY_PEM"
	fi

	if $SC_VERBOSE; then cat <<-EOF

		Next, using the recipient's SSH public key (in PEM
		format), we encrypt the symmetric key

		EOF
	fi
	openssl pkeyutl -encrypt \
		-pubin -inkey "$SC_PUB_KEY_PEM" \
		-in  "$SC_SYMMETRIC_KEY" \
		-out "$SC_SYMMETRIC_KEY.bin.enc"
	if $SC_VERBOSE; then
		ls -l "$SC_SYMMETRIC_KEY.bin.enc"
		file  "$SC_SYMMETRIC_KEY.bin.enc"
	fi

	if $SC_VERBOSE; then cat <<-EOF

		Convert to ascii-safe format

		EOF
	fi
	openssl base64 -e \
		-in  "$SC_SYMMETRIC_KEY.bin.enc" \
		-out "$SC_SYMMETRIC_KEY.enc"
	if $SC_VERBOSE; then
		ls -l "$SC_SYMMETRIC_KEY.enc"
		file  "$SC_SYMMETRIC_KEY.enc"
	fi

	if $SC_VERBOSE; then cat <<-EOF

		The symmetric key should not be reused, thus we remove it

		EOF
	fi
	rm $SC_DASH_V "$SC_SYMMETRIC_KEY" "$SC_SYMMETRIC_KEY.bin.enc"

	if $SC_VERBOSE; then cat <<-EOF

		The following files can now be sent to the recipient:

		EOF
	fi
	if $SC_VERBOSE; then
		ls -l "$SC_FILE_BASE.enc" "$SC_SYMMETRIC_KEY.enc" $0
		file  "$SC_FILE_BASE.enc" "$SC_SYMMETRIC_KEY.enc" $0
	fi

	if $SC_VERBOSE; then cat <<-EOF

		To decrypt:
		$0 -d /path/to/private/key '$SC_FILE_BASE.enc'"

		EOF
	fi

	exit 0
fi

if $SC_DECRYPT; then
	if grep -q PEM <( file "$SC_KEY" ); then
		SC_PEM_KEY="$SC_KEY"
		SC_TEMP_KEY_CREATED=false
		if $SC_VERBOSE; then
			ls -l "$SC_PEM_KEY"
			file  "$SC_PEM_KEY"
		fi
	else
		cat <<-EOF

		 The key file '$SC_KEY' is not in PEM format,
		 creating a temporary PEM version.

		 You will have to confirm the passphrase
		 and create a passphrase for the temp version as well.

		EOF

		SC_KEY_BASE=$(basename "$SC_KEY")
		SC_PEM_KEY_DIR=$(mktemp -d "/tmp/$USER.pem.XXXXXXXX")
		chmod -v 700 "$SC_PEM_KEY_DIR"
		ls -ld "$SC_PEM_KEY_DIR"
		SC_PEM_KEY="$SC_PEM_KEY_DIR/$SC_KEY_BASE"

		cp -v "$SC_KEY" "$SC_PEM_KEY"
		ssh-keygen -p -m PEM -f "$SC_PEM_KEY"
		SC_TEMP_KEY_CREATED=true
		ls -l "$SC_PEM_KEY"
		file  "$SC_PEM_KEY"
	fi

	if $SC_VERBOSE; then cat <<-EOF

		convert from ascii-safe format

		EOF
	fi

	SC_FILE_BASE=$(basename --suffix=.enc "$SC_FILE")
	SC_SYMMETRIC_KEY="$SC_FILE_BASE.symmetric-key"
	SC_SYM_KEY_ENC=$(dirname "$SC_FILE")/"$SC_SYMMETRIC_KEY.enc"
	openssl base64 -d \
		-in  "$SC_SYM_KEY_ENC" \
		-out "$SC_SYMMETRIC_KEY.bin.enc"
	if $SC_VERBOSE; then
		ls -l "$SC_SYM_KEY_ENC" "$SC_SYMMETRIC_KEY.bin.enc"
		file  "$SC_SYM_KEY_ENC" "$SC_SYMMETRIC_KEY.bin.enc"
	fi

	if $SC_VERBOSE; then cat <<-EOF

		Decrypt the symmetric key using the (PEM format) private key.
		You will be prompted to enter the passphrase for the key.

		EOF
	fi
	openssl pkeyutl -decrypt \
		-inkey "$SC_PEM_KEY" \
		-in    "$SC_SYMMETRIC_KEY.bin.enc" \
		-out   "$SC_SYMMETRIC_KEY"
	if $SC_VERBOSE; then
		ls -l "$SC_SYMMETRIC_KEY"
		file  "$SC_SYMMETRIC_KEY"
	fi

	if $SC_TEMP_KEY_CREATED; then
		cat <<-EOF

		Removing the temporary PEM format SSH private key

		EOF
		rm -rfv $SC_PEM_KEY_DIR
	fi

	if $SC_VERBOSE; then cat <<-EOF

		Binary ecnrypted symmetric key is no longer needed

		EOF
	fi
	rm $SC_DASH_V "$SC_SYMMETRIC_KEY.bin.enc"


	if $SC_VERBOSE; then cat <<-EOF

		Finally, decrypt the main file with the decrypted symmetric key

		EOF
	fi
	openssl aes-256-cbc -d \
		-a \
		-md sha512 \
		-pbkdf2 \
		-iter 1000000 \
		-in   "$SC_FILE" \
		-out  "$SC_FILE_BASE" \
		-pass "file:$SC_SYMMETRIC_KEY"
	rm $SC_DASH_V $SC_SYMMETRIC_KEY
	if $SC_VERBOSE; then
		ls -l "$SC_FILE" "$SC_FILE_BASE"
		file  "$SC_FILE" "$SC_FILE_BASE"
	fi

	exit 0
fi

sc-usage
exit 1
