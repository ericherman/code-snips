#!/bin/bash

if [ -n "$VERBOSE" ] && [ "$VERBOSE" -gt 0 ]; then
	set -x
fi

# terminate after the first line that fails (returns nonzero exit code)
set -e
set -o pipefail

if [ -z "${PREFIX}" ]; then
	GIT_BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
	BRANCH_DIR=perl-$(echo "$GIT_BRANCH_NAME" | sed "s@/@-@g")
	PREFIX=${HOME}/builds/$BRANCH_DIR
fi

if [ -z "$DEBUG" ] || [ "$DEBUG" -le 0 ] 2>/dev/null; then
	DEBUG_OPTS="-DNDEBUG $DEBUG_OPTS"
elif [ -n "$DEBUG" ] && [ "$DEBUG" -gt 0 ]; then
	DEBUG_OPTS="-Doptimize=-g -DDEBUGGING $DEBUG_OPTS"
else
	DEBUG_OPTS="$DEBUG $DEBUG_OPTS"
fi

if [ -z "$JOBS" ]; then
	# not perfect, but hopefully okay
	JOBS=$(( $(cat /proc/cpuinfo | grep '^processor' | wc -l) ))
	if [ "$JOBS" -lt 1 ]; then
		JOBS=1
	fi
fi

if [ -z "$SKIP_MAKE_TEST" ]; then
	SKIP_MAKE_TEST=0
fi

if [ -z "$SKIP_REGEN" ]; then
	SKIP_REGEN=0
fi

CONFIGURE="./Configure \
$DEBUG_OPTS \
-des \
-Dusedevel \
-Duseshrplib \
-Dusesitecustomize \
-Duselongdouble \
-Dprefix=${PREFIX} \
$EXTRA_OPTS"

echo "VERBOSE=$VERBOSE"
echo "PREFIX=$PREFIX"
echo "DEBUG_OPTS=$DEBUG_OPTS"
echo "SKIP_REGEN=$SKIP_REGEN"
echo "SKIP_MAKE_TEST=$SKIP_MAKE_TEST"
echo "TEST_JOBS=$TEST_JOBS"
echo "CC=$CC"
echo "CONFIGURE=$CONFIGURE"

if [ -z "$DRY_RUN" ] || [ "$DRY_RUN" -lt 1 ]; then
	RUN=
else
	RUN=echo
fi

mkdir -pv "$PREFIX"

if [ -f Makefile ]; then
	$RUN make clean || true
fi

if [ "$SKIP_REGEN" -lt 1 ]; then
	$RUN perl regen/embed.pl
fi


$RUN $CONFIGURE

$RUN make -j$JOBS

$RUN make -j$JOBS minitest

# $RUN make test_harness
if [ $SKIP_MAKE_TEST -lt 1 ]; then
	$RUN make -j$JOBS test
fi

date
