#!/bin/sh

# A regular "git clean -dxf" will not deal with all submodules,
# To really clean out the modules and submodules, this script uses
# "git submodule foreach --recursive".

# Sadly "--force" is not as strong as one might expect, but double
# force is. From "git help clean":

#      -d
#          Remove untracked directories in addition to untracked
#          files. If an untracked directory is managed by a different
#          Git repository, it is not removed by default. Use -f option
#          twice if you really want to remove such a directory.

#      -f, --force
#          If the Git configuration variable clean.requireForce is not
#          set to false, git clean will refuse to delete files or
#          directories unless given -f, -n or -i. Git will refuse to
#          delete directories with .git sub directory or file unless a
#          second -f is given.

#      -x
#          Donâ€™t use the standard ignore rules read from .gitignore
#          (per directory) and $GIT_DIR/info/exclude, but do still use
#          the ignore rules given with -e options. This allows
#          removing all untracked files, including build products.
#          This can be used (possibly in conjunction with git reset)
#          to create a pristine working directory to test a clean
#          build.

git clean -dffx &&
git submodule foreach --recursive git clean -dffx
